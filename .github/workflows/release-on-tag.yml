name: Release on tag

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

env:
  APP_NAME: AvaMujica

jobs:
  build_windows:
    name: Build Windows desktop (x64)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      - name: Publish (dotnet) win-x64
        shell: pwsh
        run: |
          dotnet publish ./AvaMujica.Desktop/AvaMujica.Desktop.csproj -c Release -r win-x64 -o ./bin/desktop-win

      - name: Package artifact and normalize name
        id: pack
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $version = $env:GITHUB_REF_NAME.TrimStart('v')
          $targetName = "$env:APP_NAME-windows-x64-$version.zip"
          $folder = Join-Path $PWD 'bin/desktop-win'
          if (-not (Test-Path $folder)) { throw "Windows output folder not found: $folder" }
          if (Test-Path $targetName) { Remove-Item $targetName -Force }
          Compress-Archive -Path "$folder/*" -DestinationPath $targetName -CompressionLevel Optimal
          "artifact=$targetName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64
          path: ${{ steps.pack.outputs.artifact }}

  build_linux:
    name: Build Linux desktop (x64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      - name: Publish (dotnet) linux-x64
        run: |
          dotnet publish ./AvaMujica.Desktop/AvaMujica.Desktop.csproj -c Release -r linux-x64 -o ./bin/linux-x64

      - name: Package artifact and normalize name
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${GITHUB_REF_NAME#v}"
          TARGET_NAME="${APP_NAME}-linux-x64-${VERSION}.zip"
          FOLDER="bin/linux-x64"
          if [ ! -d "$FOLDER" ]; then
            echo "Linux output folder not found: $FOLDER" >&2
            exit 1
          fi
          zip -rq "$TARGET_NAME" "$FOLDER"
          echo "artifact=$TARGET_NAME" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: ${{ steps.pack.outputs.artifact }}

  build_android:
    name: Build Android (arm64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      - name: Install Android workload
        run: dotnet workload install android

      - name: Publish (dotnet) android-arm64
        run: |
          dotnet publish ./AvaMujica.Android/AvaMujica.Android.csproj -c Release -r android-arm64 -p:AndroidPackageFormat=apk -o ./bin/apk

      - name: Collect signed APK and normalize name
        id: pack
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${GITHUB_REF_NAME#v}"
          TARGET_NAME="${APP_NAME}-android-arm64-${VERSION}.apk"
          FILE=$(find bin/apk -type f -iname '*Signed*.apk' | head -n1 || true)
          if [ -z "$FILE" ]; then
            echo "No signed APK found under bin/apk" >&2
            find bin/apk -type f -iname '*.apk' | sed 's/^/apk candidate: /'
            exit 1
          fi
          cp "$FILE" "$TARGET_NAME"
          echo "artifact=$TARGET_NAME" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-arm64
          path: ${{ steps.pack.outputs.artifact }}

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [build_windows, build_linux, build_android]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: List artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -R ./dist

      - name: Flatten artifacts
        run: |
          mkdir -p upload
          find dist -type f -maxdepth 2 -exec cp {} upload/ \;

      - name: Create Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: AvaMujica ${{ github.ref_name }}
          files: |
            upload/*
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
